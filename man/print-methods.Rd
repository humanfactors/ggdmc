% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-class.R
\docType{methods}
\name{print}
\alias{print}
\alias{print,model-method}
\alias{print,prior-method}
\title{ggdmc Printing Methods}
\usage{
print(x, ...)

\S4method{print}{model}(x, ps = NULL, ...)

\S4method{print}{prior}(x, ...)
}
\arguments{
\item{x}{a model object.}

\item{...}{Additional argument passing via dot dot dot.}

\item{ps}{a parameter vector}
}
\value{
The original model object, a list of parameter matrices or a prior
matrix
}
\description{
The function is an extension of the print function in \code{base} pacakge.
It prints a model object set up by \code{BuildModel} and a prior object
set up by \code{BuildPrior}.
}
\details{
The print method for a prior object merely rearranges a prior object
as a data frame for the inspection convenience.
}
\examples{
model <- BuildModel(
          p.map     = list(A = "1", B = "1", t0 = "1", mean_v = "M",
                      sd_v = "1", st0 = "1"),
          match.map = list(M = list(s1 = 1, s2 = 2)),
          factors   = list(S = c("s1", "s2")),
          constants = c(st0 = 0, sd_v = 1),
          responses = c("r1", "r2"),
          type      = "norm")

p.vector <- c(A = .75, B = 1.25, t0 = .15, mean_v.true = 2.5,
              mean_v.false = 1.5)

print(model)
print(model, ps=p.vector)

dat <- simulate(model, nsim = 10, ps = p.vector);
dmi <- BuildDMI(dat, model)
p.prior <- BuildPrior(
  dists = c("tnorm", "tnorm", "beta", "tnorm", "tnorm"),
  p1    = c(A = 1, B = 1, t0 = 1, mean_v.true = 1, mean_v.false = 1),
  p2    = c(1,  1,  1, 1, 1),
  lower = c(rep(0, 3),  rep(NA, 2)),
  upper = c(rep(NA, 2), 1, rep(NA, 2)))

print(p.prior)

## A different example printing a prior object
pop.mean  <- c(a=1,  v.f1=1,  v.f2=.2, z=.5, sz=.3,  sv.f1=.25, sv.f2=.23,
               t0=.3)
pop.scale <- c(a=.2, v.f1=.2, v.f2=.2, z=.1, sz=.05, sv.f1=.05, sv.f2=.05,
               t0=.05)

p.prior <- BuildPrior(
  dists = rep("tnorm", 8),
  p1    = pop.mean,
  p2    = pop.scale,
  lower = c(0, -5, -5, 0, 0, 0, 0, 0),
  upper = c(2,  5,  5, 1, 2, 2, 1, 1))

print(p.prior)
}
