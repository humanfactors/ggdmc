require(ggdmc); require(data.table); require(ggplot2); require(gridExtra)
require(testthat)

  rm(list = ls())
  setwd("/media/yslin/KIWI/Documents/ggdmc/")
  dat <- list(S = c(10, 23, 23, 26, 17,  5, 53, 55, 32, 46,  ## Success
                    10,  8, 10,  8, 23,  0,  3, 22, 15, 32,
                    3),
              N = c(39, 62, 81, 51, 39,  6, 74, 72, 51, 79,
                    13, 16, 30, 28, 45,  4, 12, 41, 30, 51,
                    7),
              X1 = c(0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  ## seed variety; 0 = aegytpiao 75 1 = aegyptiao 73
                     0, 1, 1, 1, 1,  1, 1, 1, 1, 1,
                     1),
              X2 = c(0, 0, 0, 0, 0,  1, 1, 1, 1, 1,  ## root extract; 0 = bean; 1 = cucumber
                     1, 0, 0, 0, 0,  0, 1, 1, 1, 1,
                     1),
              Ns = 21)

  d <- data.table(S = dat$X1, E = dat$X2, R = "r1", Y = dat$S, N = dat$N)
  dplyr::tbl_df(d)
  dat <- data.frame(d)

  model <- BuildModel(
    p.map     = list(a0 = "1", a1 = "1", a2 = "1", a3 = "1", b = "1"),
    match.map = NULL,
    regressors= NULL,
    factors   = list(S = c("s1", "s2"), E = c("e1", "e2")),
    responses = "r1",
    constants = NULL,
    type      = "logit")

  dmi <- BuildDMI(data.frame(d), model)

  datnames <- colnames(dat)
  Xnames   <- datnames[!datnames %in% c("R", "N", "Y")]
  Ynames   <- c("Y", "N")
  X_ <- data.matrix( dat[,Xnames])
  Y <- data.matrix(dat[,Ynames])
  X <- cbind( rep(1, nrow(dat)), X_, X_[,1]*X_[,2])

  p.vector <- c(a0 = -.55, a1 = .08, a2 = -.81, a3 = 1.35, b = .27)
  linpred <- X %*% p.vector[1:4]
  prob <- Y[,1] / Y[,2]
  yi <- qlogis(prob, 0, 1, TRUE, FALSE)
  res0 <- dnorm(yi, linpred, p.vector[5])

  res1 <- ggdmc:::density_logit(p.vector, X, Y)
  res2 <- ggdmc:::density_logit(p.vector, X, Y)
  all(res1==res2)
  sum(is.na(res1))
  sum(is.na(res2))
  all.equal(res1, res2)
  all.equal(res0, res2[,1])
  cbind(res0, res1, res2)

  # arma::vec density_logit(arma::vec pvec, arma::mat X, arma::mat Y) {

  npar <- length(GetPNames(model))
  start  <- BuildPrior(
    dists = c(rep("tnorm2", npar)),
    p1    = c(a0 = -.55, a1 = 0.08, a2 = -.81, a3 = 1.35, b = .267),
    p2    = rep(0.1, npar),
    lower = rep(NA, npar),
    upper = rep(NA, npar))

  p.prior  <-BuildPrior(
    dists = c(rep("tnorm2", npar)),
    p1    = c(a0 = 0, a1 = 0, a2 = 0, a3 = 0, b = 0),
    p2    = rep(1e-3, npar),
    lower = rep(NA, npar),
    upper = rep(NA, npar))
  plot(p.prior, ps = p.vector)
  print(p.prior)
  ## Sampling -----------
  setwd("/media/yslin/KIWI/Documents/ggdmc_lesson/")
  path <- c("data/Lesson3/ggdmc_3.8_logit.rda")

  fit0 <- Startlogit(5e2, dmi, start, p.prior, thin = 2)
  # fit0$theta[,,1]
  # str(fit0$theta)

  fit <- run(fit0)

  thin <- 32
  repeat {
    fit <- run(RestartSamples(5e2, fit, thin = thin))
    save(fit0, fit, file = path[1])
    rhat <- gelman(fit, verbose = TRUE)
    if (all(rhat$mpsrf < 1.1)) break
    thin <- thin * 2
  }
  cat("Done ", path[1], "\n")
  setwd("/media/yslin/KIWI/Documents/ggdmc/")

  ## Analysis -----------
  p0 <- plot(fit)
  p1 <- plot(fit, start = 101)
  ## plot(fit, pll =F, den=T)

  est <- summary(fit, start = 101, recover = TRUE, ps = p.vector, verbose = TRUE)
  #                   b0   b1    b2   b3       sd
  # True           -0.55 0.08 -0.81 1.35     0.27
  # 2.5% Estimate  -0.62 0.00 -0.97 1.17 -1742.63
  # 50% Estimate   -0.53 0.12 -0.83 1.35     0.97
  # 97.5% Estimate -0.44 0.25 -0.69 1.54  1660.99
  # Median-True     0.02 0.04 -0.02 0.00     0.70

  ## Gelman's simulation method
  thetas <- matrix(aperm(fit$theta, c(3,1,2)), ncol = fit$n.par)
  colnames(thetas) <- fit$pnames
  use <- sample(1:n.sims, n.sims, replace = FALSE)
  theta_rnd <- thetas[use,]

  n.sims <- 1000  ## 1e3 simulation study; each study has 1e3 trials
  X.tilde <- cbind (1, dat$X)
  ntrial <- nrow (X.tilde)
  y.tilde <- array (NA, c(n.sims, ntrial))
  for (s in 1:n.sims) {
    mu <- X.tilde %*% theta_rnd[s, 1:2]
    sd <- 1/sqrt(theta_rnd[s, 3])
    y.tilde[s,] <- rnorm(ntrial, mu, sd)
  }



  p1color <- "#FFFFFF"
  p2color <- "#A9A9A9"
  bin1 <- seq(min(dat$RT) - .1, max(dat$RT) + .1, .3)
  p1 <- hist(dat$RT, breaks = "fd", plot = FALSE)
  plot(p1, col = p1color, main = "")

  for(s in 1:n.sims) {
    p2 <- hist(y.tilde[s,], breaks = "fd", plot = FALSE)
    lines(p2$mids, p2$counts, col = p2color)
  }

  p3 <- hist(dat$RT, breaks = "fd", plot = FALSE)
  lines(p3$mids, p3$counts, col = "black", lwd = 3)





  ## Internal ------------
  (pnames   <- names(attr(model, "p.vector")))
  (allpar   <- attr(model, "all.par"))
  (parnames <- attr(model, "par.names"))
  (type     <- attr(model, "type"))
  (n1       <- attr(model, "n1.order"))
  (resp     <- attr(model, "responses"))
  (cell     <- ggdmc:::check_cell(1, model))
  (isr1     <- ggdmc:::check_rd(type, model))
  (dim1 <- dimnames(model)[[1]])
  (dim2 <- dimnames(model)[[2]])
  (dim3 <- dimnames(model)[[3]])
  (res <- ggdmc:::p_df(p.vector, cell, pnames, allpar, parnames, model, type,
                      dim1, dim2, dim3, isr1, n1, TRUE))
  TableParameters(p.vector, 1, model, FALSE)

  ise <- attr(dmi, "cell.empty")
  cellidx  <- ggdmc:::cellIdx2Mat(dmi)

  ## cell.empty internal ----------
  res <- ggdmc:::check_BuildDMI(dat, model)
  subject_models <- res$issm
  modeli <- res$model
  (fnams <- names(attr(modeli, "factors")))
  tmp1 <- dat[, c(fnams, "R")]
  head(dat)
  head(tmp1)

  cells <- apply(dat[, c(fnams, "R")], 1, paste, collapse = ".")
  ## ncell == nobservation

  sapply(dat[, c(fnams, "R")], levels)
  cell.index <- vector("list", dim(model)[1])
  names(cell.index) <- row.names(model)
  ## scan trial-by-trial (every observation)
  for ( j in names(cell.index) ) cell.index[[j]] <- cells %in% j

  ## density_glm
  X <- dat$X
  Y <- dat$RT
  nsim  <- attr(dmi, "n.pda")
  bw    <- attr(dmi, "bw")
  debug <- attr(dmi, "debug")
  posdrift <- attr(model, "posdrift")
  n1idx    <- attr(model, "n1.order")
  mc       <- attr(model, "match.cell")

  mu <- p.vector[1] + p.vector[2] * X
  den1 <- ggdmc:::density_glm(p.vector, pnames, allpar, parnames, model, type,
                              dim1, dim2, dim3, ise, cellidx, X, Y)

  den2 <- dnorm(Y, mu, p.vector[3], FALSE)
  den3 <- ggdmc:::sumloglike_glm(p.vector, pnames, allpar, parnames, model, type,
                                 dim1, dim2, dim3, n1idx, ise, cellidx, dmi$RT, mc,
                                 isr1, X, posdrift, nsim, bw, 1, 0, debug)

  all.equal(den1[,1], den2)
  sum(log(den1)) == sum(log(den2))
  all.equal( sum(log(den1)), den3)


