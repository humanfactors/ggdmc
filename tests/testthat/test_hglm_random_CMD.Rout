
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> require(ggdmc); require(data.table); require(ggplot2); require(gridExtra)
Loading required package: ggdmc
Loading required package: data.table
Loading required package: ggplot2
Loading required package: gridExtra
> require(testthat)
Loading required package: testthat
> 
>   rm(list = ls())
>   setwd("/media/yslin/KIWI/Documents/ggdmc/")
>   model <- BuildModel(
+     p.map      = list(alpha = "1", beta = "1", epsilon = "1"),
+     match.map  = NULL,
+     regressors = c(8, 15, 22, 29, 36),
+     factors    = list(S = c("x1")),
+     responses  = "r1",
+     constants  = NULL,
+     type       = "glm")
match.map is NULL

Parameter vector names are: ( see attr(,"p.vector") )
[1] "alpha"   "beta"    "epsilon"

Constants are (see attr(,"constants") ):
NULL

Model type = glm 

>   
>   npar <- length(GetPNames(model))
>   pop.mean <- c(alpha = 242.7, beta = 6.185, epsilon = 6.086)
>   pop.scale <- c(alpha = 100, beta = 5, epsilon = 5)
>   
>   # pop.mean <- c(alpha = 22.7, beta = 6.185, epsilon = 6.086)
>   # pop.scale <- c(alpha = 10, beta = 5, epsilon = 5)
>   ntrial <- 1000
>   pop.prior  <-BuildPrior(
+     dists = rep("tnorm", npar),
+     p1    = pop.mean,
+     p2    = pop.scale,
+     lower = c(NA, 0, 0),
+     upper = rep(NA, npar))
>   plot(pop.prior, ps = pop.mean)
>   dat <- simulate(model, nsub = 500, nsim = ntrial, prior = pop.prior)
>   dmi <- BuildDMI(dat, model)
>   ps <- attr(dat, "parameters")
>   colMeans(ps)
     alpha       beta    epsilon 
251.474999   6.979461   7.006046 
>   matrixStats::colSds(ps)
[1] 101.101732   4.127031   4.132255
> 
>   # p0 <- ggplot(dat, aes(x = X, y = RT)) +
>   #   geom_point() +
>   #   theme_bw(base_size = 14) +
>   #   facet_wrap(.~s)
>   # plot(p0)
> 
>   p.prior  <-BuildPrior(
+     dists = rep("tnorm", npar),
+     p1    = pop.mean, 
+     p2    = pop.scale,
+     lower = c(NA, 0, 0),
+     upper = rep(NA, npar))
>   mu.prior  <-BuildPrior(
+     dists = rep("tnorm", npar),
+     p1    = pop.mean,
+     p2    = pop.scale,
+     lower = c(NA, 0, 0),
+     upper = rep(NA, npar))
>   sigma.prior  <-BuildPrior(
+     dists = rep("tnorm", npar),
+     p1    = c(alpha = 100, beta = 5, epsilon = 5),
+     p2    = c(alpha = 50,  beta = 5, epsilon = 5),
+     lower = c(0, 0, 0),
+     upper = rep(NA, npar))
>   pp.prior <- list(mu.prior, sigma.prior)
> 
>   ## Sampling random-effect-----------
>   setwd("/media/yslin/KIWI/Documents/ggdmc_lesson/")
>   path <- c("data/Lesson4/ggdmc_4_0_hglm_random.rda")
>   # load(path)
>   
>   fit0 <- run(StartNewHypersamples(5e2, dmi, p.prior, pp.prior))
nchain is not supplied. Use default 9 chains
Generating hyper-start points for each chain: .........
DE-MCMC; hierarchical modeling
100 200 300 400 500 
>   fit  <- fit0
>   save(fit0, fit, file = path[1])
>   thin <- 1
>   repeat {
+     fit <- run(RestartHypersamples(5e2, fit, thin = thin))
+     save(fit0, fit, file = path[1])
+     rhat <- hgelman(fit, verbose = TRUE)
+     if (all(rhat < 1.2)) break
+     thin <- thin * 2
+   }
DE-MCMC; hierarchical modeling
100 200 300 400 500 
Error in chol.default(W) : 
  the leading minor of order 1 is not positive definite
Calls: hgelman ... lapply -> FUN -> <Anonymous> -> chol -> chol.default
Execution halted
