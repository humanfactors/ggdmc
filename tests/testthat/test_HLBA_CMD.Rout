
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> require(ggdmc); require(testthat); require(ggplot2); require(data.table)
Loading required package: ggdmc
Loading required package: testthat
Loading required package: ggplot2
Loading required package: data.table
> context("HLBA")
> 
>   rm(list = ls())
>   setwd("/media/yslin/KIWI/Documents/ggdmc")
>   # 2x2 (Stimulus and factor F) specified in model.dmc call
>   model <- BuildModel(
+     p.map     = list(A = "1", B = "R", t0 = "1", mean_v = c("D", "M"),
+                      sd_v = "M", st0 = "1"),
+     match.map = list(M = list(s1 = 1, s2 = 2)),
+     factors   = list(S = c("s1", "s2"), D = c("d1", "d2")),
+     constants = c(sd_v.false = 1, st0 = 0),
+     responses = c("r1", "r2"),
+     type      = "norm")

Parameter vector names are: ( see attr(,"p.vector") )
[1] "A"               "B.r1"            "B.r2"            "t0"             
[5] "mean_v.d1.true"  "mean_v.d2.true"  "mean_v.d1.false" "mean_v.d2.false"
[9] "sd_v.true"      

Constants are (see attr(,"constants") ):
sd_v.false        st0 
         1          0 

Model type = norm (posdrift = TRUE ) 

>   
>   ## Population distribution, rate effect on F
>   pop.mean <- c(A=.4, B.r1=.6, B.r2=.8, t0=.3,
+                 mean_v.d1.true  = 1.5,
+                 mean_v.d2.true  = 1.0,
+                 mean_v.d1.false = 0,
+                 mean_v.d2.false = 0,  sd_v.true = .25)
>   pop.scale <-c(A=.1, B.r1=.1, B.r2=.1, t0=.05,
+                 mean_v.d1.true  =.2,
+                 mean_v.d2.true  =.2,
+                 mean_v.d1.false =.2,
+                 mean_v.d2.false =.2,  sd_v.true = .1)
>   pop.prior <- BuildPrior2(
+     dists = rep("tnorm", 9),
+     p1 = pop.mean,
+     p2 = pop.scale,
+     lower = c(0,0,0,   .1, NA,NA,NA,NA, 0),
+     upper = c(NA,NA,NA, 1, NA,NA,NA,NA, NA))
> 
>   ## Simulate some data ----------
>   dat <- simulate(model, nsub = 30, nsim = 100, prior = pop.prior)
>   dmi <- BuildDMI(dat, model)
>   ps <- attr(dat, "parameters")
> 
>   p.prior <- BuildPrior2(
+     dists = rep("tnorm", 9),
+     p1   = pop.mean,
+     p2   = pop.scale*5,
+     lower=c(0,0,0,   .1, NA,NA,NA,NA, 0),
+     upper=c(NA,NA,NA,NA, NA,NA,NA,NA, NA))
>   mu.prior <- BuildPrior2(
+     dists = rep("tnorm",  9),
+     p1    = pop.mean,
+     p2    = c(1,   1,  1,  1,   2,  2,  2, 2,  1),
+     lower = c(0,   0,  0, .01, NA, NA, NA, NA, 0),
+     upper = c(NA, NA, NA,  NA, NA, NA, NA, NA, NA))
>   sigma.prior <- BuildPrior2(
+     dists = rep("beta", length(p.prior)),
+     p1    = c(A = 1, B.r1 = 1, B.r2 = 1, t0 = 1, mean_v.d1.true = 1,
+               mean_v.d2.true = 1, mean_v.d1.false = 1, mean_v.d2.false = 1,
+               sd_v.true = 1),
+     p2    = rep(1, 9))
>   pp.prior <- list(mu.prior, sigma.prior)
>   # plot(p.prior, ps = ps)
>   # plot(mu.prior, ps = pop.mean)
>   # plot(sigma.prior, ps = pop.scale)
>   
>   ## Sampling ------------
>   setwd("/media/yslin/KIWI/Documents/ggdmc_lesson/")
>   path <- c("data/Lesson4/ggdmc_4_6_HLBA_tmp.rda")
>   # load(path)
>   fit0 <- run(StartNewHypersamples(500, dmi, pop.prior, pp.prior)) 
nchain is not supplied. Use default 27 chains
Generating hyper-start points for each chain: ...........................
DE-MCMC; hierarchical modeling
100 200 300 400 500 
>   fit  <- fit0
>   save(fit0, fit, file = path[1])
>   thin <- 1
>   repeat {
+     fit <- run(RestartHypersamples(5e2, fit, thin = thin), pm = .05, hpm = .05)
+     save(fit0, fit, file = path[1])
+     rhat <- hgelman(fit, verbose = TRUE)
+     if (all(rhat < 1.2)) break
+     thin <- thin * 2
+   }
DE-MCMC; hierarchical modeling
100 200 300 400 500 
hyper    10    24     2    27    25    28    21    11     1     7    15    13 
 4.03  1.06  1.06  1.07  1.08  1.09  1.11  1.11  1.12  1.12  1.13  1.13  1.14 
   23     8     9     4    22    19    26    12     5     6    20     3    30 
 1.15  1.15  1.15  1.17  1.17  1.17  1.17  1.19  1.20  1.20  1.21  1.22  1.22 
   17    16    18    14    29 
 1.23  1.23  1.24  1.25  1.46 
DE-MCMC; hierarchical modeling
100 200 300 400 500 
hyper    21    26    11    10    24     6    12    13    27     1    20    16 
 2.32  1.03  1.04  1.04  1.04  1.05  1.05  1.05  1.05  1.05  1.05  1.05  1.06 
   18    28    17     9    23    15     2     7    19    30    22     3     4 
 1.06  1.06  1.06  1.07  1.07  1.07  1.07  1.07  1.08  1.08  1.08  1.08  1.08 
    8     5    25    14    29 
 1.09  1.10  1.11  1.14  1.16 
DE-MCMC; hierarchical modeling
100 200 300 400 500 
hyper    26    30     6    24     1    22    13    17    21    10     8    12 
 9.78  1.01  1.02  1.02  1.02  1.02  1.02  1.02  1.02  1.02  1.02  1.02  1.03 
   19    18     7    14    27     9    28    20    25    15    11    23    16 
 1.03  1.03  1.03  1.03  1.03  1.03  1.03  1.03  1.03  1.03  1.04  1.05  1.05 
    5     4     3     2    29 
 1.06  1.06  1.07  1.11  1.18 
DE-MCMC; hierarchical modeling
100 200 Terminated
